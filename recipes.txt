RECIPE TOOLBOX
==============

A collection of useful code snippets for anything.

Table of Contents:
  - Regex
  - SQL (postgres)
  - Bash
  - Sublime
  - Rails
  - Google
  - Vim
  - Audible


REGEX
=====

Strip non-alphanumeric characters but keep spaces
(ruby) gsub(/[^0-9a-z ]/i, '')


SQL
===

Import a CSV file into an existing postgres database
'''
CREATE TABLE users
... blah blah

COPY users from '/full/path/to/csv/users.csv' (FORMAT CSV);
'''

Notes:
  1. use "COPY users(col1, col2, ...)" if the csv is a subset of the data
  2. ALTER TABLE users ALTER COLUMN col1 DROP NOT NULL;
      to get around empty data.
  3. "\d users" to get constraints of table

A Median(numeric) aggregate function (postgres >= 8.4)
'''
CREATE OR REPLACE FUNCTION _final_median(numeric[])
   RETURNS numeric AS
$$
   SELECT AVG(val)
   FROM (
     SELECT val
     FROM unnest($1) val
     ORDER BY 1
     LIMIT  2 - MOD(array_upper($1, 1), 2)
     OFFSET CEIL(array_upper($1, 1) / 2.0) - 1
   ) sub;
$$
LANGUAGE 'sql' IMMUTABLE;
 
CREATE AGGREGATE median(numeric) (
  SFUNC=array_append,
  STYPE=numeric[],
  FINALFUNC=_final_median,
  INITCOND='{}'
);
'''

a slower, anyelment median
'''CREATE FUNCTION _final_median(anyarray) RETURNS float8 AS $$ 
  WITH q AS
  (
     SELECT val
     FROM unnest($1) val
     WHERE VAL IS NOT NULL
     ORDER BY 1
  ),
  cnt AS
  (
    SELECT COUNT(*) AS c FROM q
  )
  SELECT AVG(val)::float8
  FROM 
  (
    SELECT val FROM q
    LIMIT  2 - MOD((SELECT c FROM cnt), 2)
    OFFSET GREATEST(CEIL((SELECT c FROM cnt) / 2.0) - 1,0)  
  ) q2;
$$ LANGUAGE sql IMMUTABLE;
 
CREATE AGGREGATE median(anyelement) (
  SFUNC=array_append,
  STYPE=anyarray,
  FINALFUNC=_final_median,
  INITCOND='{}'
);
'''

BASH
====

SUBLIME
=======

Always 2 spaces for indentation:
Command-, to open preferences.
Insert: "tab_size" :  2,
        "translate_tabs_to_spaces": true
into the JSON

RUBY ON RAILS
=============

define scoped method that checks if a column (a DateTiem) falls in a certain date

  class << self
    def column_is_date(column, date)
      if column.present?
        where("#{column} >= ? AND #{column} <= ?", date.beginning_of_day, date.end_of_day)
      else
        scoped
      end
    end
  end

GOOGLE
======

mp3 trick: "love song" -inurl:(htm|html|php) intitle:"index of" +"last modified" +"parent directory" +description +size +(wma|mp3) 

VIM
===

= autoident
GG - jump to top of page
=G - auto indent entire file

AUDIBLE
=======
virtual cd rw to burn from iTunes to bin/cue
use bchunk to get wav
for i in {1..n}; do bchunk -w woe$i.bin woe$i.cue woe$i-; done
audacity to convert wav to mp3 (apply chains - mp3 conversion)